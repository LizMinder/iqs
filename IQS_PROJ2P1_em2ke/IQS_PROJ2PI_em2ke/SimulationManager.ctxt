#BlueJ class context
comment0.params=eventCode
comment0.target=java.lang.String\ getEventName(int)
comment1.params=
comment1.target=SimulationManager()
comment1.text=\n\ The\ constructor\ for\ the\ class.\ \ Only\ initializes\ the\ agentQueue\ to\n\ an\ empty\ list\ and\ sets\ time\ to\ be\ 0.\n\n\ Remember\ that\ the\ default\ constructor\ of\ the\ parent\ class\ is\ \n\ automatically\ called\ before\ the\ derived\ class\ constructor\ is\ called.\n\ The\ class\ extending\ this\ class\ will\ need\ to\ take\ care\ of\ any\ other\n\ necessary\ initialization\ details.\n
comment10.params=
comment10.target=void\ placeAgentsAtRandom()
comment11.params=host\ time
comment11.target=void\ interact(AbstractHost,\ double)
comment11.text=\n\ Interaction\ between\ two\ hosts.\ Doesn't\ apply\ to\ Vectors.\n\ @param\ host\ Host\ that\ the\ interaction\ event\ occurred\ for\ \n\ @param\ time\ \ Time\ at\ which\ the\ event\ occurred\n
comment12.params=from\ to
comment12.target=void\ transferLice(Host,\ Host)
comment13.params=agent
comment13.target=void\ checkForTreatment(AbstractHost)
comment14.params=agent
comment14.target=void\ moveHost(AbstractAgent)
comment15.params=agent\ time
comment15.target=void\ moveVector(AbstractAgent,\ double)
comment15.text=\n\ Move\ a\ louse.\ Only\ done\ if\ the\ louse\ isn't\ currently\n\ living\ in\ someone's\ clothes.\ \n\ \n\ @param\ v\ \n
comment16.params=agent
comment16.target=void\ checkInfectionStatus(AbstractHost)
comment17.params=agent
comment17.target=boolean\ checkForDeath(AbstractAgent)
comment18.params=name
comment18.target=AbstractAgent\ getAgentById(java.lang.String)
comment18.text=\n\ \ \ \ private\ AbstractAgent\ getNextEvent()\n\ \ \ \ {\n\ \ \ \ \ \ \ \ //\ a\ linear\ search\ is\ not\ the\ way\ to\ do\ this,\ but\ it\ sure\ is\ easy...\n\ \ \ \ \ \ \ \ //\ find\ the\ next\ agent\ to\ do\ something\ (in\ simulated\ time)\n\ \ \ \ \ \ \ \ int\ \ \ \ minIndex\ \=\ -1;\n\ \ \ \ \ \ \ \ double\ minTime\ \ \=\ Double.MAX_VALUE;\n\ \ \ \ \ \ \ \ for\ (int\ i\ \=\ 0;\ i\ <\ agentQueue.size();\ i++)\n\ \ \ \ \ \ \ \ {\n\ \ \ \ \ \ \ \ \ \ \ \ double\ eventTime\ \=\ agentQueue.get(i).getNextEventTime();\n\ \ \ \ \ \ \ \ \ \ \ \ if\ (eventTime\ <\ minTime)\n\ \ \ \ \ \ \ \ \ \ \ \ {\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ minIndex\ \=\ i;\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ minTime\ \=\ eventTime;\n\ \ \ \ \ \ \ \ \ \ \ \ }\n\ \ \ \ \ \ \ \ }\n\n\ \ \ \ \ \ \ \ AbstractAgent\ agent\ \=\ (minIndex\ >\=\ 0\ ?\ agentQueue.get(minIndex)\ \:\ null);\n\ \ \ \ \ \ \ \ return\ agent;\n\n\ \ \ \ }\ //\ end\ of\ getNextEvent()\n
comment19.params=
comment19.target=AbstractAgent\ getNextEvent()
comment2.params=
comment2.target=java.util.Random\ getRandomNumberGenerator()
comment20.params=row\ col
comment20.target=Shelter\ getShelterAt(int,\ int)
comment21.params=mu
comment21.target=double\ Exponential(double)
comment21.text=\n\ Generates\ an\ exponentially\ distributed\ random\ variate\ with\ mean\ mu.\n\ \n\ @param\ \ \ mu\ \ mean\ of\ the\ distribution\n\ @return\ An\ exponentially\ distributed\ random\ variable.\n
comment22.params=a\ b
comment22.target=double\ Uniform(double,\ double)
comment22.text=\n\ Generates\ a\ uniformly\ distributed\ random\ variate\ with\ mean\ (a+b)/2.\n\ \n\ @param\ \ \ a\ low\ endpoint\ of\ range\n\ @param\ \ \ b\ high\ endpoint\ of\ range\n\ @return\ \ A\ random\ value\ uniformly\ distributed\ over\ the\ request\ range.\n
comment23.params=m\ s
comment23.target=double\ Normal(double,\ double)
comment23.text=\n\ Returns\ a\ normal\ (Gaussian)\ distributed\ real\ number.\n\ NOTE\:\ use\ s\ >\ 0.0\n\ Uses\ a\ very\ accurate\ approximation\ of\ the\ normal\ idf\ due\ to\ Odeh\ &\ Evans,\ \n\ J.\ Applied\ Statistics,\ 1974,\ vol\ 23,\ pp\ 96-97.\n\ \n\ @param\ m\ Mean\ of\ the\ desired\ distribution\n\ @param\ s\ Standard\ deviation\ of\ the\ desired\ distribution\n\ \n\ @return\ A\ random\ number\ drawn\ from\ the\ normal\ distribution\ with\ the\n\ \ \ \ \ \ \ \ \ supplied\ paramters.\n
comment24.params=probability
comment24.target=boolean\ probabilityMet(double)
comment25.params=
comment25.target=int\ getNumInfectedHumans()
comment26.params=
comment26.target=int\ getNumUninfectedAgents()
comment27.params=
comment27.target=int\ getNumTreatedAgents()
comment28.params=
comment28.target=double\ getTime()
comment29.params=
comment29.target=void\ simulationFinished()
comment3.params=
comment3.target=void\ run()
comment30.params=time
comment30.target=boolean\ sheltersConsistent(double)
comment31.params=timeStep
comment31.target=void\ printSummary(int)
comment32.params=time\ host
comment32.target=boolean\ checkInfestationCap(double,\ Host)
comment32.text=\n\ Check\ to\ see\ if\ the\ host's\ infestation\ has\ passed\ the\ cap.\ If\ so,\n\ some\ randomly\ selected\ lice\ are\ set\ to\ die\ now.\n\n\ @param\ time\ Current\ simulation\ time\n
comment33.params=
comment33.target=int\ getNumInfestedHosts()
comment33.text=\n\ @return\ the\ numInfestedHosts\n
comment34.params=numInfestedHosts
comment34.target=void\ setNumInfestedHosts(int)
comment34.text=\n\ @param\ numInfestedHosts\ the\ numInfestedHosts\ to\ set\n
comment35.params=
comment35.target=int\ getNumUninfestedHosts()
comment35.text=\n\ @return\ the\ numUninfestedHosts\n
comment36.params=numUninfestedHosts
comment36.target=void\ setNumUninfestedHosts(int)
comment36.text=\n\ @param\ numUninfestedHosts\ the\ numUninfestedHosts\ to\ set\n
comment4.params=
comment4.target=void\ pause()
comment5.params=
comment5.target=void\ stop()
comment6.params=
comment6.target=void\ resume()
comment7.params=maxTime\ maxAgents\ totalAgents\ pctInfested\ pctInfected\ pctVectorsInfected\ pctTreated\ animateFast\ theCanvas\ theBar
comment7.target=void\ start(int,\ int,\ int,\ double,\ double,\ double,\ double,\ boolean,\ AgentCanvas,\ javax.swing.JProgressBar)
comment7.text=\ Called\ by\ simulation\ window\ code\ to\ start\ the\ simulation\ initially.\n\ This\ implementation\ presumes\ that\ enabling/disabling\ of\n\ the\ start/pause/resume/stop\ buttons\ has\ been\ handled\ correctly\n\ elsewhere\ (simulation\ window\ code).\n\ \n\ @param\ maxTime\ \ \ \ \ \ \ Total\ running\ time\ (in\ days)\ for\ the\ simulation\n\ @param\ maxAgents\ \ \ \ \ Maximum\ number\ of\ Hosts\ allowed\n\ @param\ totalAgents\ \ \ Number\ of\ Hosts\ to\ create\ for\ this\ run\n\ @param\ pctInfested\ \ \ Percentage\ of\ Hosts\ infested\ with\ lice\n\ @param\ pctInfected\ \ \ Percentage\ of\ Hosts\ infected\ with\ B.\ quintana\n\ @param\ pctVectorsInfected\ \ \ \ Percentage\ of\ lice\ infected\ w/\ B.\ q.\n\ @param\ pctTreated\ \ \ \ \ \ \ \ \ \ \ \ Percentage\ of\ Hosts\ initially\ treated\n\ @param\ animateFast\ \ \ Run\ the\ simulator\ fast\ (affects\ visuals)\n\ @param\ theCanvas\ \ \ \ \ Canvas\ displaying\ the\ environment\n\ @param\ theBar\ \ \ \ \ \ \ \ Progress\ bar\ for\ setup.\n
comment8.params=
comment8.target=void\ logAgentInfo()
comment9.params=
comment9.target=void\ reset()
numComments=37
